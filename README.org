#+TITLE: treebund.el

This package is used for bundling related git-worktrees from multiple repositories together. This
helps switch quickly between repositories and ensure you're on the correct branch. When you're done
with your changes, you can use the repositories in the workspace and know which ones were modified
to simplify the process of getting the changes merged in together.

Additionally, git metadata (the =.git= directory) is shared between all projects. You can stash,
pop, and pull changes in from the same repository in other workspaces thanks to the power of
[[https://git-scm.com/docs/git-worktree][git-worktrees]].

*NOTE*: This project is still under development and is rough around the edges.

* Contents
:PROPERTIES:
:TOC:      :include siblings :depth 0 :force ((nothing)) :ignore (this) :local (nothing)
:END:
:CONTENTS:
- [[#terminology][Terminology]]
- [[#structure][Structure]]
- [[#installation][Installation]]
- [[#usage][Usage]]
- [[#configuration][Configuration]]
- [[#example-snippets][Example snippets]]
- [[#license][License]]
:END:

* Terminology

| Term        | Description                                                                     |
|-------------+---------------------------------------------------------------------------------|
| *Workspace* | A collection of *project*'s created from *bare*'s.                              |
| *Project*   | A git-worktree checked out from a *bare* stored in a *workspace*.               |
| *Bare*      | A bare repository used as a source to create a *project*'s git-worktree.        |
| *Prefix*    | The string added before the name of the branch checked out for the *workspace*. |

* Structure

Workspaces are structured as such:

#+BEGIN_SRC
treebund-workspace-root (default: "~/workspaces/")
   |
   L workspace1
   |    L project-one   (branch: "feature/workspace1")
   |    L project-two   (branch: "feature/workspace1")
   |    L project-three (branch: "feature/workspace1")
   |
   L workspace2
        L project-one   (branch: "feature/workspace2")
        L project-two   (branch: "feature/workspace2")
        L project-three (branch: "feature/workspace2")
#+END_SRC

* Installation

** straight.el

#+BEGIN_SRC emacs-lisp :results none
(straight-use-package '(treebund :type git :host github :repo "purplg/treebund.el"))
;; -- Configuration goes here --
#+END_SRC

* Usage

| Command                     | Description                                 |
|-----------------------------+---------------------------------------------|
| ~treebund-open~             | Open a project in a workspace               |
| ~treebund-open-project~     | Open other project within current workspace |
| ~treebund-add-project~      | Add a project to a workspace                |
| ~treebund-remove-project~   | Remove a project from a workspace           |
| ~treebund-delete-workspace~ | Delete a workspace                          |

Assuming default configuration, the following will create a bare clone of the provided repo URL to
=~/workspaces/.bare/<repo-name>.git=, then create and open a worktree for a new branch called
=feature/<workspace-name>=.

1. Create a new workspace using ~treebund-new-workspace~.
2. Interactively call ~treebund-add-project~.
3. Select the newly created workspace.
4. Select =[ clone ]=.
5. Enter the remote URL for the repository to be added to the workspace.

   You should then be prompted with your ~project-switch-project~ prompt to begin editing.

   Whenever you need a different repository, you can call ~treebund-open~ and switch to and/or add a
   new repository to your workspace.

* Configuration

** treebund-workspace-root

*Default*:
#+BEGIN_EXAMPLE
"~/workspaces/"
#+END_EXAMPLE

The most important variable you probably want to configure is ~treebund-workspace-root~. This
configures where all of the treebund workspaces are going to be located on your file system.

** treebund-bare-dir

*Default*:
#+BEGIN_EXAMPLE
treebund-workspace-root + ".bare"
#+END_EXAMPLE

This is the directory that bare repository get cloned to. The intent is for this to be mostly
transparent, hence the =.= prefix to make it hidden by default.

** treebund-prefix

*Default*:
#+BEGIN_EXAMPLE
"feature/"
#+END_EXAMPLE

~treebund-prefix~ is a string used to prefix all treebund-created branches. By default, it's
=feature/= such that when you add a new project to a workspace, the new branch is name
=feature/<workspace-name>=. At work, I set this to my name so that I know it won't conflict with
another branch on remote.

Eventually, I plan on having workspace-specific configuration items so that you may select a prefix
per workspace. Then you could specify a prefix like =bugfix/=, an issue number, or whatever you
like for the whole workspace and easily relate multiple branches on different repositories together.

** Hooks

| Hook                                     | Description                                                    |
|------------------------------------------+----------------------------------------------------------------|
| ~treebund-before-project-open-functions~ | Called before a project is open with the path to the project.  |
| ~treebund-after-project-open-functions~  | Called after a project is open with the path to the workspace. |
| ~treebund-before-workspace-open-hook~    | Called before a workspace is open.                             |
| ~treebund-after-workspace-open-hook~     | Called after a workspace is open.                              |

See the [[#Project tabs][Project tabs]] example to see an example on how to use
=treebund-before-project-open-functions= to create a new tab for every project.

* Example snippets

** Project tabs

To create a new tab for every project opened with treebund:

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'tab-bar
    (add-hook 'treebund-before-project-open-functions
              (lambda (project-path)
                (when-let* ((workspace-path (treebund-current-workspace project-path))
                            (workspace-name (treebund--workspace-name workspace-path))
                            (project-name (treebund--project-name project-path)))
                  (tab-bar-select-tab-by-name
                   (format "%s/%s" workspace-name project-name))))))
#+END_SRC

** Workspace notes

This snippet will open a file within a =projects= directory in your =org-directory= an org file with the name of your workspace.

#+BEGIN_SRC emacs-lisp
(defun my/open-project-notes ()
    (interactive)
    (if-let ((workspace-path (or (treebund--workspace-current)
                                 (treebund--read-workspace))))
        (find-file-other-window
         ;; e.g. ~/.org/projects/some-feature.org
         (file-name-concat org-directory
                           "projects"
                           (file-name-with-extension (treebund--workspace-name workspace-path) "org")))
      (user-error "Not in a workspace")))
#+END_SRC

* License

MIT
